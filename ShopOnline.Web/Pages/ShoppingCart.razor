@page "/ShoppingCart"
@using ShopOnline.Web.Services.Contracts
@inject IShoppingCartService ShoppincartService

<h3 class="mb-5">ShoppingCart</h3>
@if(Cartitems == null && ErrorMessage == null){
    <Loading/>
}
else if(ErrorMessage != null){
    <DisplayError ErrorMessage="@ErrorMessage"/>
}
else if (Cartitems.Count > 0)
{
    <div class="row mb-5">
        <div class="col-md-9">
            @foreach (var item in Cartitems!)
            {
                <div class="row mb-4">
                    <div class="col-md-4">
                        <img src="@item.ProductImageURL" width="300" class="img-thumbnail" />
                    </div>
                    <div class="col-md-8">
                        <h5>@item.ProductName</h5>
                        <div class="mb-4">@item.ProductDescription</div>
                        <span>Price: <b>@item.Price.ToString("C")</b></span>
                        <div>
                            <button @onclick="(() => DeleteCartItem_Click(item.Id))"
                        class="btn btn-danger sm">
                                Remove
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-md-3">
            <h5>Cart Summary</h5>
            <div class="mt-2">
                <div>Total - </div>
                <a href="#" class="btn btn-success">
                    <span class="oi oi-credit-card"></span>&nbsp;Proceed to Checkout
                </a>
            </div>
        </div>
    </div>
}
else
{
    <h4>There are currently no items in your shopping cart</h4>
}


@code {
    public List<CartitemDto> Cartitems { get; set; }
    public string ErrorMessage { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Cartitems = await ShoppincartService.GetItems(HardCoded.UserId);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected async Task DeleteCartItem_Click(int id)
    {
        var cartItemDto = await ShoppincartService.DeleteItem(id);
        RemoveItem(id);
    }

    private CartitemDto GetCartitem(int id){
        return Cartitems.FirstOrDefault(i => i.Id == id);
    }

    private void RemoveItem(int id){
        var item = GetCartitem(id);

        Cartitems.Remove(item);
    }
}

@page "/ProductDetails/{Id:int}"
@using ShopOnline.Models.Dtos;
@using ShopOnline.WebServer.Services.Contracts
@inject IProductService ProductService
@inject IShoppingCartService shoppingCartService
@inject NavigationManager NavigationManager
<h3 class="mb-5">Product Details</h3>

@if (Product == null && ErrorMessage == null)
{
    <div style="text-align:center;width: 300px;margin: 0 auto">
        <Loading />
    </div>
}
else if(ErrorMessage != null){
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else{
    <div class="row">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@Product.ImageURL">
        </div>
        <div class="col-md-6">
            <h3>@Product.Name</h3>
            <p class="mb-4">@Product.Description</p>
            <p class="mb-4">
                <b>
                    @Product.Price.ToString("C")&nbsp;(@Product.Qty items in stock)
                </b>
            </p>
            <div>
                <button class="btn btn-success" 
                @onclick="() => AddToCart_Click(new CartItemToAddDto{
                    CartId = HardCoded.CartId,
                    ProductId = Product.Id,
                    Qty = 1
                })"><b>Add to Cart</b></button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id{ get; set; }
    public ProductDto Product{ get; set; }
    public string ErrorMessage{ get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Product = await ProductService.GetProductById(Id);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected async Task AddToCart_Click(CartItemToAddDto item){
        try
        {
            var cartItemDto = await shoppingCartService.AddItem(item);
            NavigationManager.NavigateTo("/ShoppingCart");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

}
